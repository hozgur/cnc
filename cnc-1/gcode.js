const fs = require('fs');
let output = undefined;
let feed = 1000;
let filename = "1001";
function init_gcode(_filename,description) {
    let gcode = "";
    if(_filename) filename = _filename;
    gcode += `(G-Code generated by ait-cnc-cli)\n`;
    if(description) gcode += `( ${description} )\n`;
    gcode += `( ${filename} )\n`;
    gcode += `( ${new Date()} )\n`;
    gcode += `( ${process.env.USER} )\n`;
    gcode += `O ${filename}\n`;
    gcode += 'G17 G21 G90 G54\n';
    gcode += "G40 G49 G80\n";
    output = fs.createWriteStream(filename+".nc");
    output.write(gcode);
};

function G0(coord) {
    let gcode = 'G0 ';
    if(coord.X) gcode += `X${coord.X} `;
    if(coord.Y) gcode += `Y${coord.Y} `;
    if(coord.Z) gcode += `Z${coord.Z}`;
    output.write(gcode + '\n');
}

function G1(coord,f) {
    let gcode = 'G1 ';
    if(coord.X) gcode += `X${coord.X} `;
    if(coord.Y) gcode += `Y${coord.Y} `;
    if(coord.Z) gcode += `Z${coord.Z} `;
    if(f) { gcode += `F${f}`; feed = f;} else gcode += `F${feed}`;
    output.write(gcode + '\n');
}

function tool(t,z) {
    let gcode = `T${t} M6\n`;
    if(z) gcode += `G43 H${t} Z${z}\n`; else gcode += `G43 H${t}\n`;
    output.write(gcode);
}

function spindle_CW(s) {
    let gcode = `S${s} M03\n`;
    output.write(gcode);
}

function spindle_CCW(s) {
    let gcode = `S${s} M04\n`;
    output.write(gcode);
}

function spindle_stop() {
    let gcode = `M05\n`;
    output.write(gcode);
}

function coolant_on() {
    let gcode = `M8\n`;
    output.write(gcode);
}

function coolant_off() {
    let gcode = `M9\n`;
    output.write(gcode);
}

function absolute_mode() {
    let gcode = `G90\n`;
    output.write(gcode);
}

function relative_mode() {
    let gcode = `G91\n`;
    output.write(gcode);
}

function program_end() {
    let gcode = `M30\n`;
    output.write(gcode);
}


function end() {
    spindle_stop();
    coolant_off();
    program_end();
    output.end();
}

module.exports = {
    init_gcode,
    G0,
    G1,
    tool,
    spindle_CW,
    spindle_CCW,
    spindle_stop,
    coolant_on,
    coolant_off,
    absolute_mode,
    relative_mode,
    program_end,
    end
};